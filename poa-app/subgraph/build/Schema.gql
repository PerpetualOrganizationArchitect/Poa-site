
##DDtoken

type DDTokenCreated @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  allowedRoleNames: [DDAllowedRoleName!]! @derivedFrom(field: "tokenCreated")
}

type DDAllowedRoleName @entity {
  id: ID!
  roleName: String!
  tokenCreated: DDTokenCreated! @link
}

type DDToken @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  mintEvents: [DDTokenMintEvent!]! @derivedFrom(field: "token")
}

type DDTokenMintEvent @entity {
  id: ID!
  token: DDToken! @link
  to: Bytes!
  amount: BigInt!
}

##participation token 
type PTTokenCreated @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  allowedRoleNames: [PTAllowedRoleName!]! @derivedFrom(field: "tokenCreated")
}

type PTAllowedRoleName @entity {
  id: ID!
  roleName: String!
  tokenCreated: PTTokenCreated! @link
}

type PTToken @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  mintEvents: [PTTokenMintEvent!]! @derivedFrom(field: "token")
  taskManagerAddress: Bytes
  supply: BigInt!
  tokenRequests: [TokenRequest!] @derivedFrom(field: "token")
}

type PTTokenMintEvent @entity {
  id: ID!
  token: PTToken! @link
  to: Bytes!
  amount: BigInt!
}

type TokenRequest @entity {
  id: ID!
  token: PTToken! @link
  user: User! @link
  ipfsHash: String!
  amount: BigInt!
  requestInfo: TokenRequestInfo! @link
  approved: Boolean!
}

type TokenRequestInfo @entity {
  id: ID!
  title: String!
  description: String!
}

##nft 

type NFTMembershipCreated @entity {
  id: ID!
  contractAddress: Bytes!
  memberTypeNames: [String!]!
  executiveRoles: [String!]!
  defaultImageURL: String!
  POname: String!
}

type NFTMembership @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
  memberTypeNames: [String!]!
  executiveRoles: [String!]!
  defaultImageURL: String!
  mintEvents: [NFTMintEvent!]! @derivedFrom(field: "membership")
  changeTypeEvents: [NFTChangeTypeEvent!]! @derivedFrom(field: "membership")
}

type NFTMemberType @entity {
  id: ID!
  memberTypeName: String!
  imageURL: String!
  membership: NFTMembership! @link
}

type NFTMintEvent @entity {
  id: ID!
  membership: NFTMembership! @link
  recipient: Bytes!
  memberTypeName: String!
  tokenURI: String!
}

type NFTChangeTypeEvent @entity {
  id: ID!
  membership: NFTMembership! @link
  user: Bytes!
  newMemberType: String!
}

## elections 

type ElectionContract @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
  elections: [Election!]! @derivedFrom(field: "electionContract")
  votingContractAddress: Bytes!
}

type Election @entity {
  id: ID!
  proposalId: BigInt!
  isActive: Boolean!
  winningCandidateIndex: BigInt
  hasValidWinner: Boolean!
  candidates: [Candidate!] @derivedFrom(field: "election")
  electionContract: ElectionContract! @link
}

type Candidate @entity {
  id: ID!
  election: Election! @link
  candidateAddress: Bytes!
  candidateName: String!
  isWinner: Boolean!
}


## treasury 

type Treasury @entity {
  id: ID!
  POname: String!
  treasuryAddress: Bytes!
  votingContract: Bytes
  withdrawals: [TreasuryWithdrawal!] @derivedFrom(field: "treasury")
  deposits: [TreasuryDeposit!] @derivedFrom(field: "treasury")
}

type TreasuryCreated @entity {
  id: ID!
  POname: String!
  treasuryAddress: Bytes!
}

type TreasuryWithdrawal @entity {
  id: ID!
  treasury: Treasury! @link
  recipient: Bytes!
  amount: BigInt!
  token: Bytes!
}

type TreasuryDeposit @entity {
  id: ID!
  treasury: Treasury! @link
  sender: Bytes!
  amount: BigInt!
  token: Bytes!
}

## education hub 

type EducationHubContract @entity {
  id: ID!
  POname: String!
  contractAddress: Bytes!
  modules: [Module!] @derivedFrom(field: "educationHub")
}

type Module @entity {
  id: ID!
  educationHub: EducationHubContract! @link
  name: String!
  ipfsHash: String!
  info: ModuleInfo! @link
  payout: BigInt!
  completetions: [ModuleCompletion!] @derivedFrom(field: "module")
}

type ModuleInfo @entity {
  id: ID!
  name: String!
  description: String!
  question: String!
  link: String!
  answers: [ModuleAnswer!] @derivedFrom(field: "moduleInfo")
}

type ModuleAnswer @entity {
  id: ID!
  moduleInfo: ModuleInfo! @link
  answer: String!
  index: Int!
}

type ModuleCompletion @entity {
  id: ID!
  module: Module! @link
  user: User @link
}

## parcitipation voting 

type PTVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type PTVoting @entity {
  id: ID!
  contract: PTVotingCreated! @link
  POname: String!
  proposals: [PTProposal!]! @derivedFrom(field: "voting")
  quorum: BigInt!
}

type PTProposal @entity {
  id: ID!
  name: String!
  creator: User @link
  voting: PTVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  experationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  transferAddress: Bytes
  options: [PTPollOption!] @derivedFrom(field: "proposal")
  votes: [PTVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
  validWinner: Boolean
}

type PTPollOption @entity {
  id: ID!
  proposal: PTProposal! @link
  name: String!
  votes: BigInt!
}

type PTVote @entity {
  id: ID!
  proposal: PTProposal! @link
  voter: User @link
  PTVoteWeights: [PTVoteWeight!] @derivedFrom(field: "vote")
}

type PTVoteWeight @entity {
  id: ID!
  vote: PTVote! @link
  user: User @link
  optionIndex: BigInt!
  voteWeight: BigInt!
}

## dd voting

type DDVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type DDVoting @entity {
  id: ID!
  contract: DDVotingCreated! @link
  POname: String!
  proposals: [DDProposal!]! @derivedFrom(field: "voting")
  quorum: BigInt!
}

type DDProposal @entity {
  id: ID!
  name: String!
  creator: User @link
  voting: DDVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  experationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  transferAddress: Bytes
  options: [DDPollOption!] @derivedFrom(field: "proposal")
  votes: [DDVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
  validWinner: Boolean
  electionEnabled: Boolean!
  election: Election @link
}

type DDPollOption @entity {
  id: ID!
  proposal: DDProposal! @link
  name: String!
  votes: BigInt!
}

type DDVote @entity {
  id: ID!
  proposal: DDProposal! @link
  DDVoteWeights: [DDVoteWeight!] @derivedFrom(field: "vote")
  voter: User @link
}

type DDVoteWeight @entity {
  id: ID!
  vote: DDVote! @link
  user: User @link
  optionIndex: BigInt!
  voteWeight: BigInt!
}

## hybrid voting 

type HybridVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type HybridVoting @entity {
  id: ID!
  contract: HybridVotingCreated! @link
  POname: String!
  percentDD: BigInt!
  percentPT: BigInt!
  proposals: [HybridProposal!]! @derivedFrom(field: "voting")
  quorum: BigInt!
}

type HybridProposal @entity {
  id: ID!
  name: String!
  creator: User @link
  voting: HybridVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  experationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  transferAddress: Bytes
  options: [HybridPollOption!] @derivedFrom(field: "proposal")
  votes: [HybridVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
  validWinner: Boolean
}

type HybridPollOption @entity {
  id: ID!
  proposal: HybridProposal! @link
  name: String!
  votesPT: BigInt!
  votesDD: BigInt!
}

type HybridVote @entity {
  id: ID!
  proposal: HybridProposal! @link
  voter: User @link
  HybridVoteWeights: [HybridVoteWeight!] @derivedFrom(field: "vote")
}

type HybridVoteWeight @entity {
  id: ID!
  vote: HybridVote! @link
  user: User @link
  optionIndex: BigInt!
  voteWeightPT: BigInt!
  voteWeightDD: BigInt!
}

## task manager 

type TaskManagerCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type TaskManager @entity {
  id: ID!
  contract: TaskManagerCreated! @link
  POname: String!
  projects: [Project!] @derivedFrom(field: "taskManager")
  activeTaskAmount: BigInt!
  completedTaskAmount: BigInt!
}

type Task @entity {
  id: ID!
  taskInfo: TaskInfo! @link
  taskManager: TaskManager! @link
  ipfsHash: String!
  payout: BigInt!
  project: Project! @link
  claimer: Bytes
  completed: Boolean!
  user: User @link
}

type TaskInfo @entity {
  id: ID!
  name: String!
  description: String!
  location: String!
  difficulty: String!
  estimatedHours: String!
  submissionContent: String
}

type Project @entity {
  id: ID!
  taskManager: TaskManager! @link
  name: String!
  tasks: [Task!] @derivedFrom(field: "project")
  deleted: Boolean!
}

## registry 

type RegistryCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type Registry @entity {
  id: ID!
  contract: RegistryCreated! @link
  POname: String!
  votingContract: Bytes
  validContracts: [ValidContract!] @derivedFrom(field: "registry")
  logoHash: String
}

type ValidContract @entity {
  id: ID!
  contractAddress: Bytes!
  registry: Registry! @link
  name: String!
}

## ipfs PO about info 

type infoIPFS @entity {
  id: ID!
  description: String
  links: [aboutLink!] @derivedFrom(field: "infoIPFS")
}

type aboutLink @entity {
  id: ID!
  name: String!
  url: String!
  infoIPFS: infoIPFS! @link
}

# Quick Join 
type QuickJoinContract @entity {
  id: ID!
  POname: String!
}


## Perpetual Organization info 

type PerpetualOrganization @entity {
  id: ID!
  name: String!
  aboutInfo: infoIPFS @link
  logoHash: String
  NFTMembership: NFTMembership! @link
  registry: Registry @link
  DirectDemocracyToken: DDToken @link
  ParticipationToken: PTToken @link
  Treasury: Treasury @link
  TaskManager: TaskManager @link
  ParticipationVoting: PTVoting @link
  DirectDemocracyVoting: DDVoting @link
  HybridVoting: HybridVoting @link
  ElectionContract: ElectionContract @link
  EducationHubContract: EducationHubContract @link
  QuickJoinContract: QuickJoinContract @link
  Users: [User!] @derivedFrom(field: "organization")
  totalMembers: BigInt!
}

type User @entity {
  id: ID!
  organization: PerpetualOrganization! @link
  address: Bytes!
  ddTokenBalance: BigInt!
  ptTokenBalance: BigInt!
  memberType: NFTMemberType @link
  tasks: [Task!] @derivedFrom(field: "user")
  ptVotes: [PTVote!] @derivedFrom(field: "voter")
  ddVotes: [DDVote!] @derivedFrom(field: "voter")
  hybridVotes: [HybridVote!] @derivedFrom(field: "voter")
  ptProposals: [PTProposal!] @derivedFrom(field: "creator")
  ddProposals: [DDProposal!] @derivedFrom(field: "creator")
  hybridProposals: [HybridProposal!] @derivedFrom(field: "creator")
  Account: Account @link
  totalVotes: BigInt!
  dateJoined: BigInt!
  modulesCompleted: [ModuleCompletion!] @derivedFrom(field: "user")
  tokenRequests: [TokenRequest!] @derivedFrom(field: "user")
}

type Account @entity {
  id: ID!
  address: Bytes!
  userName: String
  users: [User!] @derivedFrom(field: "Account")
}





