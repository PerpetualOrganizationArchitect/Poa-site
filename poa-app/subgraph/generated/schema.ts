// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class DDTokenCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDTokenCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDTokenCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDTokenCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDTokenCreated | null {
    return changetype<DDTokenCreated | null>(
      store.get_in_block("DDTokenCreated", id),
    );
  }

  static load(id: string): DDTokenCreated | null {
    return changetype<DDTokenCreated | null>(store.get("DDTokenCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get allowedRoleNames(): DDAllowedRoleNameLoader {
    return new DDAllowedRoleNameLoader(
      "DDTokenCreated",
      this.get("id")!.toString(),
      "allowedRoleNames",
    );
  }
}

export class DDAllowedRoleName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDAllowedRoleName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDAllowedRoleName must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDAllowedRoleName", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDAllowedRoleName | null {
    return changetype<DDAllowedRoleName | null>(
      store.get_in_block("DDAllowedRoleName", id),
    );
  }

  static load(id: string): DDAllowedRoleName | null {
    return changetype<DDAllowedRoleName | null>(
      store.get("DDAllowedRoleName", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get roleName(): string {
    let value = this.get("roleName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roleName(value: string) {
    this.set("roleName", Value.fromString(value));
  }

  get tokenCreated(): string {
    let value = this.get("tokenCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenCreated(value: string) {
    this.set("tokenCreated", Value.fromString(value));
  }
}

export class DDToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDToken | null {
    return changetype<DDToken | null>(store.get_in_block("DDToken", id));
  }

  static load(id: string): DDToken | null {
    return changetype<DDToken | null>(store.get("DDToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get mintEvents(): DDTokenMintEventLoader {
    return new DDTokenMintEventLoader(
      "DDToken",
      this.get("id")!.toString(),
      "mintEvents",
    );
  }
}

export class DDTokenMintEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDTokenMintEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDTokenMintEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDTokenMintEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDTokenMintEvent | null {
    return changetype<DDTokenMintEvent | null>(
      store.get_in_block("DDTokenMintEvent", id),
    );
  }

  static load(id: string): DDTokenMintEvent | null {
    return changetype<DDTokenMintEvent | null>(
      store.get("DDTokenMintEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class PTTokenCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTTokenCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTTokenCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTTokenCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTTokenCreated | null {
    return changetype<PTTokenCreated | null>(
      store.get_in_block("PTTokenCreated", id),
    );
  }

  static load(id: string): PTTokenCreated | null {
    return changetype<PTTokenCreated | null>(store.get("PTTokenCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get allowedRoleNames(): PTAllowedRoleNameLoader {
    return new PTAllowedRoleNameLoader(
      "PTTokenCreated",
      this.get("id")!.toString(),
      "allowedRoleNames",
    );
  }
}

export class PTAllowedRoleName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTAllowedRoleName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTAllowedRoleName must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTAllowedRoleName", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTAllowedRoleName | null {
    return changetype<PTAllowedRoleName | null>(
      store.get_in_block("PTAllowedRoleName", id),
    );
  }

  static load(id: string): PTAllowedRoleName | null {
    return changetype<PTAllowedRoleName | null>(
      store.get("PTAllowedRoleName", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get roleName(): string {
    let value = this.get("roleName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roleName(value: string) {
    this.set("roleName", Value.fromString(value));
  }

  get tokenCreated(): string {
    let value = this.get("tokenCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenCreated(value: string) {
    this.set("tokenCreated", Value.fromString(value));
  }
}

export class PTToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTToken | null {
    return changetype<PTToken | null>(store.get_in_block("PTToken", id));
  }

  static load(id: string): PTToken | null {
    return changetype<PTToken | null>(store.get("PTToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get mintEvents(): PTTokenMintEventLoader {
    return new PTTokenMintEventLoader(
      "PTToken",
      this.get("id")!.toString(),
      "mintEvents",
    );
  }

  get taskManagerAddress(): Bytes | null {
    let value = this.get("taskManagerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set taskManagerAddress(value: Bytes | null) {
    if (!value) {
      this.unset("taskManagerAddress");
    } else {
      this.set("taskManagerAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get supply(): BigInt {
    let value = this.get("supply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get tokenRequests(): TokenRequestLoader {
    return new TokenRequestLoader(
      "PTToken",
      this.get("id")!.toString(),
      "tokenRequests",
    );
  }
}

export class PTTokenMintEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTTokenMintEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTTokenMintEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTTokenMintEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTTokenMintEvent | null {
    return changetype<PTTokenMintEvent | null>(
      store.get_in_block("PTTokenMintEvent", id),
    );
  }

  static load(id: string): PTTokenMintEvent | null {
    return changetype<PTTokenMintEvent | null>(
      store.get("PTTokenMintEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TokenRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenRequest | null {
    return changetype<TokenRequest | null>(
      store.get_in_block("TokenRequest", id),
    );
  }

  static load(id: string): TokenRequest | null {
    return changetype<TokenRequest | null>(store.get("TokenRequest", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get requestInfo(): string {
    let value = this.get("requestInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set requestInfo(value: string) {
    this.set("requestInfo", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class TokenRequestInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenRequestInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenRequestInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenRequestInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenRequestInfo | null {
    return changetype<TokenRequestInfo | null>(
      store.get_in_block("TokenRequestInfo", id),
    );
  }

  static load(id: string): TokenRequestInfo | null {
    return changetype<TokenRequestInfo | null>(
      store.get("TokenRequestInfo", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }
}

export class NFTMembershipCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMembershipCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMembershipCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMembershipCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMembershipCreated | null {
    return changetype<NFTMembershipCreated | null>(
      store.get_in_block("NFTMembershipCreated", id),
    );
  }

  static load(id: string): NFTMembershipCreated | null {
    return changetype<NFTMembershipCreated | null>(
      store.get("NFTMembershipCreated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get memberTypeNames(): Array<string> {
    let value = this.get("memberTypeNames");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set memberTypeNames(value: Array<string>) {
    this.set("memberTypeNames", Value.fromStringArray(value));
  }

  get executiveRoles(): Array<string> {
    let value = this.get("executiveRoles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executiveRoles(value: Array<string>) {
    this.set("executiveRoles", Value.fromStringArray(value));
  }

  get defaultImageURL(): string {
    let value = this.get("defaultImageURL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set defaultImageURL(value: string) {
    this.set("defaultImageURL", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class NFTMembership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMembership entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMembership must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMembership", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMembership | null {
    return changetype<NFTMembership | null>(
      store.get_in_block("NFTMembership", id),
    );
  }

  static load(id: string): NFTMembership | null {
    return changetype<NFTMembership | null>(store.get("NFTMembership", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get memberTypeNames(): Array<string> {
    let value = this.get("memberTypeNames");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set memberTypeNames(value: Array<string>) {
    this.set("memberTypeNames", Value.fromStringArray(value));
  }

  get executiveRoles(): Array<string> {
    let value = this.get("executiveRoles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executiveRoles(value: Array<string>) {
    this.set("executiveRoles", Value.fromStringArray(value));
  }

  get defaultImageURL(): string {
    let value = this.get("defaultImageURL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set defaultImageURL(value: string) {
    this.set("defaultImageURL", Value.fromString(value));
  }

  get mintEvents(): NFTMintEventLoader {
    return new NFTMintEventLoader(
      "NFTMembership",
      this.get("id")!.toString(),
      "mintEvents",
    );
  }

  get changeTypeEvents(): NFTChangeTypeEventLoader {
    return new NFTChangeTypeEventLoader(
      "NFTMembership",
      this.get("id")!.toString(),
      "changeTypeEvents",
    );
  }
}

export class NFTMemberType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMemberType entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMemberType must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMemberType", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMemberType | null {
    return changetype<NFTMemberType | null>(
      store.get_in_block("NFTMemberType", id),
    );
  }

  static load(id: string): NFTMemberType | null {
    return changetype<NFTMemberType | null>(store.get("NFTMemberType", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get memberTypeName(): string {
    let value = this.get("memberTypeName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set memberTypeName(value: string) {
    this.set("memberTypeName", Value.fromString(value));
  }

  get imageURL(): string {
    let value = this.get("imageURL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set imageURL(value: string) {
    this.set("imageURL", Value.fromString(value));
  }

  get membership(): string {
    let value = this.get("membership");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set membership(value: string) {
    this.set("membership", Value.fromString(value));
  }
}

export class NFTMintEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMintEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMintEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMintEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMintEvent | null {
    return changetype<NFTMintEvent | null>(
      store.get_in_block("NFTMintEvent", id),
    );
  }

  static load(id: string): NFTMintEvent | null {
    return changetype<NFTMintEvent | null>(store.get("NFTMintEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get membership(): string {
    let value = this.get("membership");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set membership(value: string) {
    this.set("membership", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get memberTypeName(): string {
    let value = this.get("memberTypeName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set memberTypeName(value: string) {
    this.set("memberTypeName", Value.fromString(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }
}

export class NFTChangeTypeEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTChangeTypeEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTChangeTypeEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTChangeTypeEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTChangeTypeEvent | null {
    return changetype<NFTChangeTypeEvent | null>(
      store.get_in_block("NFTChangeTypeEvent", id),
    );
  }

  static load(id: string): NFTChangeTypeEvent | null {
    return changetype<NFTChangeTypeEvent | null>(
      store.get("NFTChangeTypeEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get membership(): string {
    let value = this.get("membership");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set membership(value: string) {
    this.set("membership", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get newMemberType(): string {
    let value = this.get("newMemberType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set newMemberType(value: string) {
    this.set("newMemberType", Value.fromString(value));
  }
}

export class ElectionContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ElectionContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ElectionContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ElectionContract", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ElectionContract | null {
    return changetype<ElectionContract | null>(
      store.get_in_block("ElectionContract", id),
    );
  }

  static load(id: string): ElectionContract | null {
    return changetype<ElectionContract | null>(
      store.get("ElectionContract", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get elections(): ElectionLoader {
    return new ElectionLoader(
      "ElectionContract",
      this.get("id")!.toString(),
      "elections",
    );
  }

  get votingContractAddress(): Bytes {
    let value = this.get("votingContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set votingContractAddress(value: Bytes) {
    this.set("votingContractAddress", Value.fromBytes(value));
  }
}

export class Election extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Election entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Election must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Election", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Election | null {
    return changetype<Election | null>(store.get_in_block("Election", id));
  }

  static load(id: string): Election | null {
    return changetype<Election | null>(store.get("Election", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get winningCandidateIndex(): BigInt | null {
    let value = this.get("winningCandidateIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningCandidateIndex(value: BigInt | null) {
    if (!value) {
      this.unset("winningCandidateIndex");
    } else {
      this.set("winningCandidateIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get hasValidWinner(): boolean {
    let value = this.get("hasValidWinner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasValidWinner(value: boolean) {
    this.set("hasValidWinner", Value.fromBoolean(value));
  }

  get candidates(): CandidateLoader {
    return new CandidateLoader(
      "Election",
      this.get("id")!.toString(),
      "candidates",
    );
  }

  get electionContract(): string {
    let value = this.get("electionContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set electionContract(value: string) {
    this.set("electionContract", Value.fromString(value));
  }
}

export class Candidate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Candidate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Candidate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Candidate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Candidate | null {
    return changetype<Candidate | null>(store.get_in_block("Candidate", id));
  }

  static load(id: string): Candidate | null {
    return changetype<Candidate | null>(store.get("Candidate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get election(): string {
    let value = this.get("election");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set election(value: string) {
    this.set("election", Value.fromString(value));
  }

  get candidateAddress(): Bytes {
    let value = this.get("candidateAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set candidateAddress(value: Bytes) {
    this.set("candidateAddress", Value.fromBytes(value));
  }

  get candidateName(): string {
    let value = this.get("candidateName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set candidateName(value: string) {
    this.set("candidateName", Value.fromString(value));
  }

  get isWinner(): boolean {
    let value = this.get("isWinner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWinner(value: boolean) {
    this.set("isWinner", Value.fromBoolean(value));
  }
}

export class Treasury extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Treasury entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Treasury must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Treasury", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Treasury | null {
    return changetype<Treasury | null>(store.get_in_block("Treasury", id));
  }

  static load(id: string): Treasury | null {
    return changetype<Treasury | null>(store.get("Treasury", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get treasuryAddress(): Bytes {
    let value = this.get("treasuryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set treasuryAddress(value: Bytes) {
    this.set("treasuryAddress", Value.fromBytes(value));
  }

  get votingContract(): Bytes | null {
    let value = this.get("votingContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set votingContract(value: Bytes | null) {
    if (!value) {
      this.unset("votingContract");
    } else {
      this.set("votingContract", Value.fromBytes(<Bytes>value));
    }
  }

  get withdrawals(): TreasuryWithdrawalLoader {
    return new TreasuryWithdrawalLoader(
      "Treasury",
      this.get("id")!.toString(),
      "withdrawals",
    );
  }

  get deposits(): TreasuryDepositLoader {
    return new TreasuryDepositLoader(
      "Treasury",
      this.get("id")!.toString(),
      "deposits",
    );
  }
}

export class TreasuryCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TreasuryCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TreasuryCreated | null {
    return changetype<TreasuryCreated | null>(
      store.get_in_block("TreasuryCreated", id),
    );
  }

  static load(id: string): TreasuryCreated | null {
    return changetype<TreasuryCreated | null>(store.get("TreasuryCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get treasuryAddress(): Bytes {
    let value = this.get("treasuryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set treasuryAddress(value: Bytes) {
    this.set("treasuryAddress", Value.fromBytes(value));
  }
}

export class TreasuryWithdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryWithdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryWithdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TreasuryWithdrawal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TreasuryWithdrawal | null {
    return changetype<TreasuryWithdrawal | null>(
      store.get_in_block("TreasuryWithdrawal", id),
    );
  }

  static load(id: string): TreasuryWithdrawal | null {
    return changetype<TreasuryWithdrawal | null>(
      store.get("TreasuryWithdrawal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get treasury(): string {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set treasury(value: string) {
    this.set("treasury", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class TreasuryDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TreasuryDeposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TreasuryDeposit | null {
    return changetype<TreasuryDeposit | null>(
      store.get_in_block("TreasuryDeposit", id),
    );
  }

  static load(id: string): TreasuryDeposit | null {
    return changetype<TreasuryDeposit | null>(store.get("TreasuryDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get treasury(): string {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set treasury(value: string) {
    this.set("treasury", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class EducationHubContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EducationHubContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EducationHubContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EducationHubContract", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EducationHubContract | null {
    return changetype<EducationHubContract | null>(
      store.get_in_block("EducationHubContract", id),
    );
  }

  static load(id: string): EducationHubContract | null {
    return changetype<EducationHubContract | null>(
      store.get("EducationHubContract", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get modules(): ModuleLoader {
    return new ModuleLoader(
      "EducationHubContract",
      this.get("id")!.toString(),
      "modules",
    );
  }
}

export class Module extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Module entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Module must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Module", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Module | null {
    return changetype<Module | null>(store.get_in_block("Module", id));
  }

  static load(id: string): Module | null {
    return changetype<Module | null>(store.get("Module", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get educationHub(): string {
    let value = this.get("educationHub");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set educationHub(value: string) {
    this.set("educationHub", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get info(): string {
    let value = this.get("info");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set info(value: string) {
    this.set("info", Value.fromString(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get completetions(): ModuleCompletionLoader {
    return new ModuleCompletionLoader(
      "Module",
      this.get("id")!.toString(),
      "completetions",
    );
  }
}

export class ModuleInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModuleInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ModuleInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ModuleInfo | null {
    return changetype<ModuleInfo | null>(store.get_in_block("ModuleInfo", id));
  }

  static load(id: string): ModuleInfo | null {
    return changetype<ModuleInfo | null>(store.get("ModuleInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get answers(): ModuleAnswerLoader {
    return new ModuleAnswerLoader(
      "ModuleInfo",
      this.get("id")!.toString(),
      "answers",
    );
  }
}

export class ModuleAnswer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModuleAnswer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleAnswer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ModuleAnswer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ModuleAnswer | null {
    return changetype<ModuleAnswer | null>(
      store.get_in_block("ModuleAnswer", id),
    );
  }

  static load(id: string): ModuleAnswer | null {
    return changetype<ModuleAnswer | null>(store.get("ModuleAnswer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moduleInfo(): string {
    let value = this.get("moduleInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set moduleInfo(value: string) {
    this.set("moduleInfo", Value.fromString(value));
  }

  get answer(): string {
    let value = this.get("answer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }
}

export class ModuleCompletion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModuleCompletion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleCompletion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ModuleCompletion", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ModuleCompletion | null {
    return changetype<ModuleCompletion | null>(
      store.get_in_block("ModuleCompletion", id),
    );
  }

  static load(id: string): ModuleCompletion | null {
    return changetype<ModuleCompletion | null>(
      store.get("ModuleCompletion", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get module(): string {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set module(value: string) {
    this.set("module", Value.fromString(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }
}

export class PTVotingCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTVotingCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTVotingCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTVotingCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTVotingCreated | null {
    return changetype<PTVotingCreated | null>(
      store.get_in_block("PTVotingCreated", id),
    );
  }

  static load(id: string): PTVotingCreated | null {
    return changetype<PTVotingCreated | null>(store.get("PTVotingCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class PTVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTVoting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTVoting", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTVoting | null {
    return changetype<PTVoting | null>(store.get_in_block("PTVoting", id));
  }

  static load(id: string): PTVoting | null {
    return changetype<PTVoting | null>(store.get("PTVoting", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get proposals(): PTProposalLoader {
    return new PTProposalLoader(
      "PTVoting",
      this.get("id")!.toString(),
      "proposals",
    );
  }

  get quorum(): BigInt {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quorum(value: BigInt) {
    this.set("quorum", Value.fromBigInt(value));
  }
}

export class PTProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTProposal | null {
    return changetype<PTProposal | null>(store.get_in_block("PTProposal", id));
  }

  static load(id: string): PTProposal | null {
    return changetype<PTProposal | null>(store.get("PTProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get voting(): string {
    let value = this.get("voting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voting(value: string) {
    this.set("voting", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get totalVotes(): BigInt {
    let value = this.get("totalVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVotes(value: BigInt) {
    this.set("totalVotes", Value.fromBigInt(value));
  }

  get timeInMinutes(): BigInt {
    let value = this.get("timeInMinutes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeInMinutes(value: BigInt) {
    this.set("timeInMinutes", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get experationTimestamp(): BigInt {
    let value = this.get("experationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set experationTimestamp(value: BigInt) {
    this.set("experationTimestamp", Value.fromBigInt(value));
  }

  get transferTriggerOptionIndex(): BigInt | null {
    let value = this.get("transferTriggerOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferTriggerOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("transferTriggerOptionIndex");
    } else {
      this.set("transferTriggerOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferRecipient(): Bytes | null {
    let value = this.get("transferRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferRecipient(value: Bytes | null) {
    if (!value) {
      this.unset("transferRecipient");
    } else {
      this.set("transferRecipient", Value.fromBytes(<Bytes>value));
    }
  }

  get transferAmount(): BigInt | null {
    let value = this.get("transferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferAmount(value: BigInt | null) {
    if (!value) {
      this.unset("transferAmount");
    } else {
      this.set("transferAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferEnabled(): boolean {
    let value = this.get("transferEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transferEnabled(value: boolean) {
    this.set("transferEnabled", Value.fromBoolean(value));
  }

  get transferAddress(): Bytes | null {
    let value = this.get("transferAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferAddress(value: Bytes | null) {
    if (!value) {
      this.unset("transferAddress");
    } else {
      this.set("transferAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get options(): PTPollOptionLoader {
    return new PTPollOptionLoader(
      "PTProposal",
      this.get("id")!.toString(),
      "options",
    );
  }

  get votes(): PTVoteLoader {
    return new PTVoteLoader("PTProposal", this.get("id")!.toString(), "votes");
  }

  get winningOptionIndex(): BigInt | null {
    let value = this.get("winningOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("winningOptionIndex");
    } else {
      this.set("winningOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get validWinner(): boolean {
    let value = this.get("validWinner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set validWinner(value: boolean) {
    this.set("validWinner", Value.fromBoolean(value));
  }
}

export class PTPollOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTPollOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTPollOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTPollOption", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTPollOption | null {
    return changetype<PTPollOption | null>(
      store.get_in_block("PTPollOption", id),
    );
  }

  static load(id: string): PTPollOption | null {
    return changetype<PTPollOption | null>(store.get("PTPollOption", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class PTVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PTVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PTVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PTVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PTVote | null {
    return changetype<PTVote | null>(store.get_in_block("PTVote", id));
  }

  static load(id: string): PTVote | null {
    return changetype<PTVote | null>(store.get("PTVote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): string | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voter(value: string | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromString(<string>value));
    }
  }

  get optionIndex(): BigInt {
    let value = this.get("optionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optionIndex(value: BigInt) {
    this.set("optionIndex", Value.fromBigInt(value));
  }

  get voteWeight(): BigInt {
    let value = this.get("voteWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set voteWeight(value: BigInt) {
    this.set("voteWeight", Value.fromBigInt(value));
  }
}

export class DDVotingCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDVotingCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDVotingCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDVotingCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDVotingCreated | null {
    return changetype<DDVotingCreated | null>(
      store.get_in_block("DDVotingCreated", id),
    );
  }

  static load(id: string): DDVotingCreated | null {
    return changetype<DDVotingCreated | null>(store.get("DDVotingCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class DDVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDVoting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDVoting", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDVoting | null {
    return changetype<DDVoting | null>(store.get_in_block("DDVoting", id));
  }

  static load(id: string): DDVoting | null {
    return changetype<DDVoting | null>(store.get("DDVoting", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get proposals(): DDProposalLoader {
    return new DDProposalLoader(
      "DDVoting",
      this.get("id")!.toString(),
      "proposals",
    );
  }

  get quorum(): BigInt {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quorum(value: BigInt) {
    this.set("quorum", Value.fromBigInt(value));
  }
}

export class DDProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDProposal | null {
    return changetype<DDProposal | null>(store.get_in_block("DDProposal", id));
  }

  static load(id: string): DDProposal | null {
    return changetype<DDProposal | null>(store.get("DDProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get voting(): string {
    let value = this.get("voting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voting(value: string) {
    this.set("voting", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get totalVotes(): BigInt {
    let value = this.get("totalVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVotes(value: BigInt) {
    this.set("totalVotes", Value.fromBigInt(value));
  }

  get timeInMinutes(): BigInt {
    let value = this.get("timeInMinutes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeInMinutes(value: BigInt) {
    this.set("timeInMinutes", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get experationTimestamp(): BigInt {
    let value = this.get("experationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set experationTimestamp(value: BigInt) {
    this.set("experationTimestamp", Value.fromBigInt(value));
  }

  get transferTriggerOptionIndex(): BigInt | null {
    let value = this.get("transferTriggerOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferTriggerOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("transferTriggerOptionIndex");
    } else {
      this.set("transferTriggerOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferRecipient(): Bytes | null {
    let value = this.get("transferRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferRecipient(value: Bytes | null) {
    if (!value) {
      this.unset("transferRecipient");
    } else {
      this.set("transferRecipient", Value.fromBytes(<Bytes>value));
    }
  }

  get transferAmount(): BigInt | null {
    let value = this.get("transferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferAmount(value: BigInt | null) {
    if (!value) {
      this.unset("transferAmount");
    } else {
      this.set("transferAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferEnabled(): boolean {
    let value = this.get("transferEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transferEnabled(value: boolean) {
    this.set("transferEnabled", Value.fromBoolean(value));
  }

  get transferAddress(): Bytes | null {
    let value = this.get("transferAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferAddress(value: Bytes | null) {
    if (!value) {
      this.unset("transferAddress");
    } else {
      this.set("transferAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get options(): DDPollOptionLoader {
    return new DDPollOptionLoader(
      "DDProposal",
      this.get("id")!.toString(),
      "options",
    );
  }

  get votes(): DDVoteLoader {
    return new DDVoteLoader("DDProposal", this.get("id")!.toString(), "votes");
  }

  get winningOptionIndex(): BigInt | null {
    let value = this.get("winningOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("winningOptionIndex");
    } else {
      this.set("winningOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get validWinner(): boolean {
    let value = this.get("validWinner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set validWinner(value: boolean) {
    this.set("validWinner", Value.fromBoolean(value));
  }

  get electionEnabled(): boolean {
    let value = this.get("electionEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set electionEnabled(value: boolean) {
    this.set("electionEnabled", Value.fromBoolean(value));
  }

  get election(): string | null {
    let value = this.get("election");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set election(value: string | null) {
    if (!value) {
      this.unset("election");
    } else {
      this.set("election", Value.fromString(<string>value));
    }
  }
}

export class DDPollOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDPollOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDPollOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDPollOption", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDPollOption | null {
    return changetype<DDPollOption | null>(
      store.get_in_block("DDPollOption", id),
    );
  }

  static load(id: string): DDPollOption | null {
    return changetype<DDPollOption | null>(store.get("DDPollOption", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class DDVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDVote | null {
    return changetype<DDVote | null>(store.get_in_block("DDVote", id));
  }

  static load(id: string): DDVote | null {
    return changetype<DDVote | null>(store.get("DDVote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get DDVoteWeights(): DDVoteWeightLoader {
    return new DDVoteWeightLoader(
      "DDVote",
      this.get("id")!.toString(),
      "DDVoteWeights",
    );
  }

  get voter(): string | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voter(value: string | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromString(<string>value));
    }
  }
}

export class DDVoteWeight extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DDVoteWeight entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DDVoteWeight must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DDVoteWeight", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DDVoteWeight | null {
    return changetype<DDVoteWeight | null>(
      store.get_in_block("DDVoteWeight", id),
    );
  }

  static load(id: string): DDVoteWeight | null {
    return changetype<DDVoteWeight | null>(store.get("DDVoteWeight", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vote(): string {
    let value = this.get("vote");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vote(value: string) {
    this.set("vote", Value.fromString(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }

  get optionIndex(): BigInt {
    let value = this.get("optionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optionIndex(value: BigInt) {
    this.set("optionIndex", Value.fromBigInt(value));
  }

  get voteWeight(): BigInt {
    let value = this.get("voteWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set voteWeight(value: BigInt) {
    this.set("voteWeight", Value.fromBigInt(value));
  }
}

export class HybridVotingCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HybridVotingCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HybridVotingCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HybridVotingCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HybridVotingCreated | null {
    return changetype<HybridVotingCreated | null>(
      store.get_in_block("HybridVotingCreated", id),
    );
  }

  static load(id: string): HybridVotingCreated | null {
    return changetype<HybridVotingCreated | null>(
      store.get("HybridVotingCreated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class HybridVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HybridVoting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HybridVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HybridVoting", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HybridVoting | null {
    return changetype<HybridVoting | null>(
      store.get_in_block("HybridVoting", id),
    );
  }

  static load(id: string): HybridVoting | null {
    return changetype<HybridVoting | null>(store.get("HybridVoting", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get percentDD(): BigInt {
    let value = this.get("percentDD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set percentDD(value: BigInt) {
    this.set("percentDD", Value.fromBigInt(value));
  }

  get percentPT(): BigInt {
    let value = this.get("percentPT");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set percentPT(value: BigInt) {
    this.set("percentPT", Value.fromBigInt(value));
  }

  get proposals(): HybridProposalLoader {
    return new HybridProposalLoader(
      "HybridVoting",
      this.get("id")!.toString(),
      "proposals",
    );
  }

  get quorum(): BigInt {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quorum(value: BigInt) {
    this.set("quorum", Value.fromBigInt(value));
  }
}

export class HybridProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HybridProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HybridProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HybridProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HybridProposal | null {
    return changetype<HybridProposal | null>(
      store.get_in_block("HybridProposal", id),
    );
  }

  static load(id: string): HybridProposal | null {
    return changetype<HybridProposal | null>(store.get("HybridProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get voting(): string {
    let value = this.get("voting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voting(value: string) {
    this.set("voting", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get totalVotesDD(): BigInt {
    let value = this.get("totalVotesDD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVotesDD(value: BigInt) {
    this.set("totalVotesDD", Value.fromBigInt(value));
  }

  get totalVotesPT(): BigInt {
    let value = this.get("totalVotesPT");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVotesPT(value: BigInt) {
    this.set("totalVotesPT", Value.fromBigInt(value));
  }

  get timeInMinutes(): BigInt {
    let value = this.get("timeInMinutes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeInMinutes(value: BigInt) {
    this.set("timeInMinutes", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get experationTimestamp(): BigInt {
    let value = this.get("experationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set experationTimestamp(value: BigInt) {
    this.set("experationTimestamp", Value.fromBigInt(value));
  }

  get transferTriggerOptionIndex(): BigInt | null {
    let value = this.get("transferTriggerOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferTriggerOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("transferTriggerOptionIndex");
    } else {
      this.set("transferTriggerOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferRecipient(): Bytes | null {
    let value = this.get("transferRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferRecipient(value: Bytes | null) {
    if (!value) {
      this.unset("transferRecipient");
    } else {
      this.set("transferRecipient", Value.fromBytes(<Bytes>value));
    }
  }

  get transferAmount(): BigInt | null {
    let value = this.get("transferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transferAmount(value: BigInt | null) {
    if (!value) {
      this.unset("transferAmount");
    } else {
      this.set("transferAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferEnabled(): boolean {
    let value = this.get("transferEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transferEnabled(value: boolean) {
    this.set("transferEnabled", Value.fromBoolean(value));
  }

  get transferAddress(): Bytes | null {
    let value = this.get("transferAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferAddress(value: Bytes | null) {
    if (!value) {
      this.unset("transferAddress");
    } else {
      this.set("transferAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get options(): HybridPollOptionLoader {
    return new HybridPollOptionLoader(
      "HybridProposal",
      this.get("id")!.toString(),
      "options",
    );
  }

  get votes(): HybridVoteLoader {
    return new HybridVoteLoader(
      "HybridProposal",
      this.get("id")!.toString(),
      "votes",
    );
  }

  get winningOptionIndex(): BigInt | null {
    let value = this.get("winningOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("winningOptionIndex");
    } else {
      this.set("winningOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get validWinner(): boolean {
    let value = this.get("validWinner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set validWinner(value: boolean) {
    this.set("validWinner", Value.fromBoolean(value));
  }
}

export class HybridPollOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HybridPollOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HybridPollOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HybridPollOption", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HybridPollOption | null {
    return changetype<HybridPollOption | null>(
      store.get_in_block("HybridPollOption", id),
    );
  }

  static load(id: string): HybridPollOption | null {
    return changetype<HybridPollOption | null>(
      store.get("HybridPollOption", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class HybridVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HybridVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HybridVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HybridVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HybridVote | null {
    return changetype<HybridVote | null>(store.get_in_block("HybridVote", id));
  }

  static load(id: string): HybridVote | null {
    return changetype<HybridVote | null>(store.get("HybridVote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): string | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voter(value: string | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromString(<string>value));
    }
  }

  get optionIndex(): BigInt {
    let value = this.get("optionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optionIndex(value: BigInt) {
    this.set("optionIndex", Value.fromBigInt(value));
  }

  get voteWeightPT(): BigInt {
    let value = this.get("voteWeightPT");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set voteWeightPT(value: BigInt) {
    this.set("voteWeightPT", Value.fromBigInt(value));
  }

  get voteWeightDD(): BigInt {
    let value = this.get("voteWeightDD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set voteWeightDD(value: BigInt) {
    this.set("voteWeightDD", Value.fromBigInt(value));
  }
}

export class TaskManagerCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskManagerCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TaskManagerCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TaskManagerCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TaskManagerCreated | null {
    return changetype<TaskManagerCreated | null>(
      store.get_in_block("TaskManagerCreated", id),
    );
  }

  static load(id: string): TaskManagerCreated | null {
    return changetype<TaskManagerCreated | null>(
      store.get("TaskManagerCreated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class TaskManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TaskManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TaskManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TaskManager | null {
    return changetype<TaskManager | null>(
      store.get_in_block("TaskManager", id),
    );
  }

  static load(id: string): TaskManager | null {
    return changetype<TaskManager | null>(store.get("TaskManager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get projects(): ProjectLoader {
    return new ProjectLoader(
      "TaskManager",
      this.get("id")!.toString(),
      "projects",
    );
  }

  get activeTaskAmount(): BigInt {
    let value = this.get("activeTaskAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeTaskAmount(value: BigInt) {
    this.set("activeTaskAmount", Value.fromBigInt(value));
  }

  get completedTaskAmount(): BigInt {
    let value = this.get("completedTaskAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set completedTaskAmount(value: BigInt) {
    this.set("completedTaskAmount", Value.fromBigInt(value));
  }
}

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Task entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Task must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Task", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Task | null {
    return changetype<Task | null>(store.get_in_block("Task", id));
  }

  static load(id: string): Task | null {
    return changetype<Task | null>(store.get("Task", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskInfo(): string {
    let value = this.get("taskInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set taskInfo(value: string) {
    this.set("taskInfo", Value.fromString(value));
  }

  get taskManager(): string {
    let value = this.get("taskManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set taskManager(value: string) {
    this.set("taskManager", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get project(): string {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get claimer(): Bytes | null {
    let value = this.get("claimer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimer(value: Bytes | null) {
    if (!value) {
      this.unset("claimer");
    } else {
      this.set("claimer", Value.fromBytes(<Bytes>value));
    }
  }

  get completed(): boolean {
    let value = this.get("completed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }
}

export class TaskInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TaskInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TaskInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TaskInfo | null {
    return changetype<TaskInfo | null>(store.get_in_block("TaskInfo", id));
  }

  static load(id: string): TaskInfo | null {
    return changetype<TaskInfo | null>(store.get("TaskInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get difficulty(): string {
    let value = this.get("difficulty");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set difficulty(value: string) {
    this.set("difficulty", Value.fromString(value));
  }

  get estimatedHours(): string {
    let value = this.get("estimatedHours");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set estimatedHours(value: string) {
    this.set("estimatedHours", Value.fromString(value));
  }

  get submissionContent(): string | null {
    let value = this.get("submissionContent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submissionContent(value: string | null) {
    if (!value) {
      this.unset("submissionContent");
    } else {
      this.set("submissionContent", Value.fromString(<string>value));
    }
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Project", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Project | null {
    return changetype<Project | null>(store.get_in_block("Project", id));
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskManager(): string {
    let value = this.get("taskManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set taskManager(value: string) {
    this.set("taskManager", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tasks(): TaskLoader {
    return new TaskLoader("Project", this.get("id")!.toString(), "tasks");
  }

  get deleted(): boolean {
    let value = this.get("deleted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set deleted(value: boolean) {
    this.set("deleted", Value.fromBoolean(value));
  }
}

export class RegistryCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistryCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegistryCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RegistryCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RegistryCreated | null {
    return changetype<RegistryCreated | null>(
      store.get_in_block("RegistryCreated", id),
    );
  }

  static load(id: string): RegistryCreated | null {
    return changetype<RegistryCreated | null>(store.get("RegistryCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Registry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Registry", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Registry | null {
    return changetype<Registry | null>(store.get_in_block("Registry", id));
  }

  static load(id: string): Registry | null {
    return changetype<Registry | null>(store.get("Registry", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }

  get votingContract(): Bytes | null {
    let value = this.get("votingContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set votingContract(value: Bytes | null) {
    if (!value) {
      this.unset("votingContract");
    } else {
      this.set("votingContract", Value.fromBytes(<Bytes>value));
    }
  }

  get validContracts(): ValidContractLoader {
    return new ValidContractLoader(
      "Registry",
      this.get("id")!.toString(),
      "validContracts",
    );
  }

  get logoHash(): string | null {
    let value = this.get("logoHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logoHash(value: string | null) {
    if (!value) {
      this.unset("logoHash");
    } else {
      this.set("logoHash", Value.fromString(<string>value));
    }
  }
}

export class ValidContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ValidContract", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ValidContract | null {
    return changetype<ValidContract | null>(
      store.get_in_block("ValidContract", id),
    );
  }

  static load(id: string): ValidContract | null {
    return changetype<ValidContract | null>(store.get("ValidContract", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get registry(): string {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class infoIPFS extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save infoIPFS entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type infoIPFS must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("infoIPFS", id.toString(), this);
    }
  }

  static loadInBlock(id: string): infoIPFS | null {
    return changetype<infoIPFS | null>(store.get_in_block("infoIPFS", id));
  }

  static load(id: string): infoIPFS | null {
    return changetype<infoIPFS | null>(store.get("infoIPFS", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get links(): aboutLinkLoader {
    return new aboutLinkLoader("infoIPFS", this.get("id")!.toString(), "links");
  }
}

export class aboutLink extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save aboutLink entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type aboutLink must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("aboutLink", id.toString(), this);
    }
  }

  static loadInBlock(id: string): aboutLink | null {
    return changetype<aboutLink | null>(store.get_in_block("aboutLink", id));
  }

  static load(id: string): aboutLink | null {
    return changetype<aboutLink | null>(store.get("aboutLink", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get infoIPFS(): string {
    let value = this.get("infoIPFS");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set infoIPFS(value: string) {
    this.set("infoIPFS", Value.fromString(value));
  }
}

export class QuickJoinContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuickJoinContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuickJoinContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("QuickJoinContract", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuickJoinContract | null {
    return changetype<QuickJoinContract | null>(
      store.get_in_block("QuickJoinContract", id),
    );
  }

  static load(id: string): QuickJoinContract | null {
    return changetype<QuickJoinContract | null>(
      store.get("QuickJoinContract", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get POname(): string {
    let value = this.get("POname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set POname(value: string) {
    this.set("POname", Value.fromString(value));
  }
}

export class PerpetualOrganization extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PerpetualOrganization entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PerpetualOrganization must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PerpetualOrganization", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PerpetualOrganization | null {
    return changetype<PerpetualOrganization | null>(
      store.get_in_block("PerpetualOrganization", id),
    );
  }

  static load(id: string): PerpetualOrganization | null {
    return changetype<PerpetualOrganization | null>(
      store.get("PerpetualOrganization", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get aboutInfo(): string | null {
    let value = this.get("aboutInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set aboutInfo(value: string | null) {
    if (!value) {
      this.unset("aboutInfo");
    } else {
      this.set("aboutInfo", Value.fromString(<string>value));
    }
  }

  get logoHash(): string | null {
    let value = this.get("logoHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logoHash(value: string | null) {
    if (!value) {
      this.unset("logoHash");
    } else {
      this.set("logoHash", Value.fromString(<string>value));
    }
  }

  get NFTMembership(): string {
    let value = this.get("NFTMembership");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set NFTMembership(value: string) {
    this.set("NFTMembership", Value.fromString(value));
  }

  get registry(): string | null {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registry(value: string | null) {
    if (!value) {
      this.unset("registry");
    } else {
      this.set("registry", Value.fromString(<string>value));
    }
  }

  get DirectDemocracyToken(): string | null {
    let value = this.get("DirectDemocracyToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set DirectDemocracyToken(value: string | null) {
    if (!value) {
      this.unset("DirectDemocracyToken");
    } else {
      this.set("DirectDemocracyToken", Value.fromString(<string>value));
    }
  }

  get ParticipationToken(): string | null {
    let value = this.get("ParticipationToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ParticipationToken(value: string | null) {
    if (!value) {
      this.unset("ParticipationToken");
    } else {
      this.set("ParticipationToken", Value.fromString(<string>value));
    }
  }

  get Treasury(): string | null {
    let value = this.get("Treasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Treasury(value: string | null) {
    if (!value) {
      this.unset("Treasury");
    } else {
      this.set("Treasury", Value.fromString(<string>value));
    }
  }

  get TaskManager(): string | null {
    let value = this.get("TaskManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set TaskManager(value: string | null) {
    if (!value) {
      this.unset("TaskManager");
    } else {
      this.set("TaskManager", Value.fromString(<string>value));
    }
  }

  get ParticipationVoting(): string | null {
    let value = this.get("ParticipationVoting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ParticipationVoting(value: string | null) {
    if (!value) {
      this.unset("ParticipationVoting");
    } else {
      this.set("ParticipationVoting", Value.fromString(<string>value));
    }
  }

  get DirectDemocracyVoting(): string | null {
    let value = this.get("DirectDemocracyVoting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set DirectDemocracyVoting(value: string | null) {
    if (!value) {
      this.unset("DirectDemocracyVoting");
    } else {
      this.set("DirectDemocracyVoting", Value.fromString(<string>value));
    }
  }

  get HybridVoting(): string | null {
    let value = this.get("HybridVoting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set HybridVoting(value: string | null) {
    if (!value) {
      this.unset("HybridVoting");
    } else {
      this.set("HybridVoting", Value.fromString(<string>value));
    }
  }

  get ElectionContract(): string | null {
    let value = this.get("ElectionContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ElectionContract(value: string | null) {
    if (!value) {
      this.unset("ElectionContract");
    } else {
      this.set("ElectionContract", Value.fromString(<string>value));
    }
  }

  get EducationHubContract(): string | null {
    let value = this.get("EducationHubContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set EducationHubContract(value: string | null) {
    if (!value) {
      this.unset("EducationHubContract");
    } else {
      this.set("EducationHubContract", Value.fromString(<string>value));
    }
  }

  get QuickJoinContract(): string | null {
    let value = this.get("QuickJoinContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set QuickJoinContract(value: string | null) {
    if (!value) {
      this.unset("QuickJoinContract");
    } else {
      this.set("QuickJoinContract", Value.fromString(<string>value));
    }
  }

  get Users(): UserLoader {
    return new UserLoader(
      "PerpetualOrganization",
      this.get("id")!.toString(),
      "Users",
    );
  }

  get totalMembers(): BigInt {
    let value = this.get("totalMembers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMembers(value: BigInt) {
    this.set("totalMembers", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get organization(): string {
    let value = this.get("organization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set organization(value: string) {
    this.set("organization", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get ddTokenBalance(): BigInt {
    let value = this.get("ddTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ddTokenBalance(value: BigInt) {
    this.set("ddTokenBalance", Value.fromBigInt(value));
  }

  get ptTokenBalance(): BigInt {
    let value = this.get("ptTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ptTokenBalance(value: BigInt) {
    this.set("ptTokenBalance", Value.fromBigInt(value));
  }

  get memberType(): string | null {
    let value = this.get("memberType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set memberType(value: string | null) {
    if (!value) {
      this.unset("memberType");
    } else {
      this.set("memberType", Value.fromString(<string>value));
    }
  }

  get tasks(): TaskLoader {
    return new TaskLoader("User", this.get("id")!.toString(), "tasks");
  }

  get ptVotes(): PTVoteLoader {
    return new PTVoteLoader("User", this.get("id")!.toString(), "ptVotes");
  }

  get ddVotes(): DDVoteLoader {
    return new DDVoteLoader("User", this.get("id")!.toString(), "ddVotes");
  }

  get hybridVotes(): HybridVoteLoader {
    return new HybridVoteLoader(
      "User",
      this.get("id")!.toString(),
      "hybridVotes",
    );
  }

  get ptProposals(): PTProposalLoader {
    return new PTProposalLoader(
      "User",
      this.get("id")!.toString(),
      "ptProposals",
    );
  }

  get ddProposals(): DDProposalLoader {
    return new DDProposalLoader(
      "User",
      this.get("id")!.toString(),
      "ddProposals",
    );
  }

  get hybridProposals(): HybridProposalLoader {
    return new HybridProposalLoader(
      "User",
      this.get("id")!.toString(),
      "hybridProposals",
    );
  }

  get Account(): string | null {
    let value = this.get("Account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Account(value: string | null) {
    if (!value) {
      this.unset("Account");
    } else {
      this.set("Account", Value.fromString(<string>value));
    }
  }

  get totalVotes(): BigInt {
    let value = this.get("totalVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVotes(value: BigInt) {
    this.set("totalVotes", Value.fromBigInt(value));
  }

  get dateJoined(): BigInt {
    let value = this.get("dateJoined");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dateJoined(value: BigInt) {
    this.set("dateJoined", Value.fromBigInt(value));
  }

  get modulesCompleted(): ModuleCompletionLoader {
    return new ModuleCompletionLoader(
      "User",
      this.get("id")!.toString(),
      "modulesCompleted",
    );
  }

  get tokenRequests(): TokenRequestLoader {
    return new TokenRequestLoader(
      "User",
      this.get("id")!.toString(),
      "tokenRequests",
    );
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get userName(): string | null {
    let value = this.get("userName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userName(value: string | null) {
    if (!value) {
      this.unset("userName");
    } else {
      this.set("userName", Value.fromString(<string>value));
    }
  }

  get users(): UserLoader {
    return new UserLoader("Account", this.get("id")!.toString(), "users");
  }
}

export class DDAllowedRoleNameLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDAllowedRoleName[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDAllowedRoleName[]>(value);
  }
}

export class DDTokenMintEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDTokenMintEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDTokenMintEvent[]>(value);
  }
}

export class PTAllowedRoleNameLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PTAllowedRoleName[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PTAllowedRoleName[]>(value);
  }
}

export class PTTokenMintEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PTTokenMintEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PTTokenMintEvent[]>(value);
  }
}

export class TokenRequestLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenRequest[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenRequest[]>(value);
  }
}

export class NFTMintEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NFTMintEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NFTMintEvent[]>(value);
  }
}

export class NFTChangeTypeEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NFTChangeTypeEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NFTChangeTypeEvent[]>(value);
  }
}

export class ElectionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Election[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Election[]>(value);
  }
}

export class CandidateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Candidate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Candidate[]>(value);
  }
}

export class TreasuryWithdrawalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TreasuryWithdrawal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TreasuryWithdrawal[]>(value);
  }
}

export class TreasuryDepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TreasuryDeposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TreasuryDeposit[]>(value);
  }
}

export class ModuleLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Module[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Module[]>(value);
  }
}

export class ModuleCompletionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ModuleCompletion[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ModuleCompletion[]>(value);
  }
}

export class ModuleAnswerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ModuleAnswer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ModuleAnswer[]>(value);
  }
}

export class PTProposalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PTProposal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PTProposal[]>(value);
  }
}

export class PTPollOptionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PTPollOption[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PTPollOption[]>(value);
  }
}

export class PTVoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PTVote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PTVote[]>(value);
  }
}

export class DDProposalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDProposal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDProposal[]>(value);
  }
}

export class DDPollOptionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDPollOption[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDPollOption[]>(value);
  }
}

export class DDVoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDVote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDVote[]>(value);
  }
}

export class DDVoteWeightLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DDVoteWeight[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DDVoteWeight[]>(value);
  }
}

export class HybridProposalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HybridProposal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HybridProposal[]>(value);
  }
}

export class HybridPollOptionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HybridPollOption[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HybridPollOption[]>(value);
  }
}

export class HybridVoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HybridVote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HybridVote[]>(value);
  }
}

export class ProjectLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Project[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Project[]>(value);
  }
}

export class TaskLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Task[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Task[]>(value);
  }
}

export class ValidContractLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ValidContract[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ValidContract[]>(value);
  }
}

export class aboutLinkLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): aboutLink[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<aboutLink[]>(value);
  }
}

export class UserLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): User[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<User[]>(value);
  }
}
